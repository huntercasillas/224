                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Hunter Casillas NetID: casillas
                            | #
                            | # 1. Included iaddq statements to lessen steps
                            | # 2. Added one loop unroller (this took forever)
                            | # 3. switched up registers to avoid criss-crossing 
                            | # (I forget the technical term)
                            | # 4. Added two more loop unrollers (this took two forevers) 
                            | # 5. Added unroller function so unrolling could be done in factors
                            | # (inspired by CMU lecture on YouTube)
                            | # 6. Reordered some mov instructions that cause bubbles
                            | # 7. Reordered functions (there's still bad jumping sorry)
                            | # 8. Added functions to handle up to 3 extras since any multiples
                            | # of four should be handled by the first half of the program
                            | # 9. Added fifth and sixth factor loop unrolling, deleted unnecessary
                            | # instructions. 
                            | # 10. Added extra value handlers 4 and 5
                            | # 11. Made extra handlers preemtively set registers a function early
                            | # to avoid bubbles
                            | #
                            | # In the end, this program really just assesses 4 indices at once
                            | # (maximum) and adds to count if they're positive. The idea is simple
                            | # but getting it to work was near impossible.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x000:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
                            | 	
                            | 	
0x000: c0f2faffffffffffffff | 	iaddq  $-6, %rdx        # len -= 6
0x00a: 723001000000000000   | 	jl     Extra            # Check for extras
                            | 
0x013: 50a70000000000000000 | Loop:	mrmovq (%rdi), %r10	# read val from src...
0x01d: 50b70800000000000000 | 	mrmovq 8(%rdi), %r11    # read next val from src
0x027: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# src[i] to dst
0x031: 62aa                 | 	andq   %r10, %r10	# src[i] <= 0?
0x033: 714600000000000000   | 	jle    Npos0		# if so, goto Npos0:
0x03c: c0f00100000000000000 | 	iaddq  $1, %rax		# count++
                            | 
0x046:                      | Npos0:	
0x046: 40b60800000000000000 | 	rmmovq %r11, 8(%rsi)    # src[i+1] to dst
0x050: 62bb                 | 	andq   %r11, %r11       # is %r11 <= 0?
0x052: 716500000000000000   | 	jle    Npos1		# if so, go to Npos1
0x05b: c0f00100000000000000 | 	iaddq  $1, %rax         # count++
                            | 
0x065:                      | Npos1: 
0x065: 50a71000000000000000 | 	mrmovq 16(%rdi), %r10   # src[i+2] to %r10
0x06f: 50b71800000000000000 | 	mrmovq 24(%rdi), %r11   # src[i+3] to %r11
0x079: 40a61000000000000000 | 	rmmovq %r10, 16(%rsi)   # src[i+2] to dst[i+2]
0x083: 62aa                 | 	andq   %r10, %r10       # src[i+2] <= 0? 
0x085: 719800000000000000   | 	jle    Npos2            # if so, go to Npos2
0x08e: c0f00100000000000000 | 	iaddq  $1, %rax         # count ++
                            | 
0x098:                      | Npos2: 
0x098: 40b61800000000000000 | 	rmmovq %r11, 24(%rsi)   # src[i+3] to dst
0x0a2: 62bb                 | 	andq   %r11, %r11       # src[i+3] <= 0? 
0x0a4: 71b700000000000000   | 	jle    Npos3            # if so, go to Unroller
0x0ad: c0f00100000000000000 | 	iaddq  $1, %rax         # count++ 
                            | 	
0x0b7:                      | Npos3: 
0x0b7: 50a72000000000000000 | 	mrmovq 32(%rdi), %r10   # src[i+4] to %r10
0x0c1: 50b72800000000000000 | 	mrmovq 40(%rdi), %r11   # src[i+5] to %r11
0x0cb: 40a62000000000000000 | 	rmmovq %r10, 32(%rsi)   # src[i+4] to dst[i+4]
0x0d5: 62aa                 | 	andq   %r10, %r10       # src[i+4] <= 0?
0x0d7: 71ea00000000000000   | 	jle    Npos4            # if so, go to Npos4
0x0e0: c0f00100000000000000 | 	iaddq  $1, %rax         # count++
                            | 
0x0ea:                      | Npos4: 
0x0ea: 40b62800000000000000 | 	rmmovq %r11, 40(%rsi)   # src[i+5] to dst
0x0f4: 62bb                 | 	andq   %r11, %r11       # is %r11 <= 0?
0x0f6: 710901000000000000   | 	jle    Unroller         # if so, go to Unroller
0x0ff: c0f00100000000000000 | 	iaddq  $1, %rax         # count++
                            | 
                            | 
0x109:                      | Unroller: 
0x109: c0f73000000000000000 | 	iaddq $48, %rdi         # start unrolling src at [i+6]
0x113: c0f63000000000000000 | 	iaddq $48, %rsi         # start unrolling dst at [i+6]
0x11d: c0f2faffffffffffffff | 	iaddq $-6, %rdx         # len is now 6 less
0x127: 751300000000000000   | 	jge   Loop              # if we're not done, start unrolling
                            | 
0x130:                      | Extra:  
0x130: c0f20600000000000000 | 	iaddq $6, %rdx          # return len to the right value
                            | 
0x13a:                      | Extra0:
0x13a: c0f2ffffffffffffffff | 	iaddq  $-1, %rdx        # len--
0x144: 726602000000000000   | 	jl     Done             # finish up if no extras
0x14d: 50a70000000000000000 | 	mrmovq (%rdi), %r10     # this basically does
0x157: 50b70800000000000000 | 	mrmovq 8(%rdi), %r11    # the same thing as 
0x161: 40a60000000000000000 | 	rmmovq %r10, (%rsi)     # the loop unrollers
0x16b: 62aa                 | 	andq   %r10, %r10       # but starts 6 indices later.
0x16d: 718001000000000000   | 	jle    Extra1           # pretty neat, huh?
0x176: c0f00100000000000000 | 	iaddq  $1, %rax         # count++
                            | 	
0x180:                      | Extra1: 
0x180: c0f2ffffffffffffffff | 	iaddq  $-1, %rdx        # len-- 
0x18a: 726602000000000000   | 	jl     Done             # finish up if no extras 
0x193: 40b60800000000000000 | 	rmmovq %r11, 8(%rsi)    # src [i+1] to dst[i+1]
0x19d: 62bb                 | 	andq   %r11, %r11       # src [i+1] <= 0?
0x19f: 71b201000000000000   | 	jle    Extra2           # if so, go to Extra2
0x1a8: c0f00100000000000000 | 	iaddq  $1, %rax         # count++ 
                            | 
0x1b2:                      | Extra2: 
0x1b2: c0f2ffffffffffffffff | 	iaddq  $-1, %rdx        # len-- 
0x1bc: 726602000000000000   | 	jl     Done             # finish up if no extras
0x1c5: 50a71000000000000000 | 	mrmovq 16(%rdi), %r10   # src[i+2] to %r10 
0x1cf: 50b71800000000000000 | 	mrmovq 24(%rdi), %r11   # src[i+3] to %r11
0x1d9: 40a61000000000000000 | 	rmmovq %r10, 16(%rsi)   # src[i+2] to dst[i+2] 
0x1e3: 62aa                 | 	andq   %r10, %r10       # src[i+2] <= 0? 
0x1e5: 71f801000000000000   | 	jle    Extra3           # if so, go to Extra3
0x1ee: c0f00100000000000000 | 	iaddq  $1, %rax         # count++
                            | 
0x1f8:                      | Extra3: 
0x1f8: c0f2ffffffffffffffff | 	iaddq  $-1, %rdx        # len--
0x202: 726602000000000000   | 	jl     Done	        # finish up if no extras 
0x20b: 40b61800000000000000 | 	rmmovq %r11, 24(%rsi)   # src[i+3] to dst[i+3]
0x215: 62bb                 | 	andq   %r11, %r11       # src[i+3] <= 0? 
0x217: 712a02000000000000   | 	jle    Extra4           # if so, go to Extra4 
0x220: c0f00100000000000000 | 	iaddq  $1, %rax 
                            | 
0x22a:                      | Extra4: 
0x22a: c0f2ffffffffffffffff | 	iaddq  $-1, %rdx        # len--
0x234: 726602000000000000   | 	jl     Done             # finish up if no extras 
0x23d: 50a72000000000000000 | 	mrmovq 32(%rdi), %r10   # src[i+4] to %r10 
0x247: 40a62000000000000000 | 	rmmovq %r10, 32(%rsi)   # src[i+4] to dst[i+4] 
0x251: 62aa                 | 	andq   %r10, %r10       # src[i+4] <= 0? 
0x253: 716602000000000000   | 	jle    Done             # if so, finish up
0x25c: c0f00100000000000000 | 	iaddq  $1, %rax         # count++
                            | 
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x266:                      | Done:
0x266: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x267:                      | End:
                            | #/* $end ncopy-ys */
