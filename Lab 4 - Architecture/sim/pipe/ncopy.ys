#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Hunter Casillas 
# NetID: casillas
#
# Describe how and why you modified the baseline code:
# 
# See comments directly after each instruction for full explanation...
# I implemented and used iaddq to decrease the amount of overall instructions.
# I added a loop unroller function, which unrolls by a factor of 4.
# I alternated registers to avoid data dependencies.
# I added 3 functions to handle extras after the loop unroller.
# I preemptively set certain registers a function early to avoid bubbles. 
# This ncopy program assesses 4 indices at once and adds to the count if they are > 0.  
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header
	xorq %rax,%rax		# count = 0;
	andq %rdx,%rdx		# len <= 0?
	jle Done		# if yes, goto Done:
	iaddq $-4, %rdx		# len = len - 4
	jl End			# check for extras, goto End:

Loop:	mrmovq (%rdi), %r10	# move src[i] to %r10
	mrmovq 8(%rdi), %r9	# move src[i+1] to %r9
    	rmmovq %r10, (%rsi)	# move src[i] to dst[i]
    	andq %r10, %r10		# src[i] <= 0?
    	jle Npos1       	# if yes, goto Npos1:
    	iaddq $1, %rax      	# count++

Npos1:	rmmovq %r9, 8(%rsi)	# move src[i+1] to dst[i+1]
	andq %r9, %r9		# src[i+1] <= 0?
	jle Npos2		# if yes, goto Npos2:
	iaddq $1, %rax		# count++

Npos2:	mrmovq 16(%rdi), %r10	# move src[i+2] to %r10
	mrmovq 24(%rdi), %r9	# move src[i+3] to %r9
	rmmovq %r10, 16(%rsi)	# move src[i+2] to dst[i+2]
	andq %r10, %r10		# src[i+2] <= 0?
	jle Npos3:		# if yes, goto Npos3:
	iaddq $1, %rax		# count++

Npos3:	rmmovq %r9, 24(%rsi)	# move src[i+3] to dst[i+3]
	andq %r9, %r9		# src[i+3] <= 0?
	jle Unroll		# if yes, goto Unroll:
	iaddq $1, %rax		# count++

Unroll:	iaddq $32, %rdi		# begin unrolling at src[i+4]
	iaddq $32, %rsi		# begin unrolling at dst[i+4]
	iaddq $-4, %rdx		# len = len - 4
	jge Loop		# if extras remain, repeat Loop

End:	iaddq $4, %rdx		# return len to correct value

Extra1: iaddq $-1, %rdx         # len = len - 1
        jl Done                 # if no extras, goto Done:
        mrmovq (%rdi), %r10     # move src[i] to %r10
	mrmovq 8(%rdi), %r11    # move src[i+1] to %r11
	rmmovq %r10, (%rsi)     # move src[i] to dst[i]
        andq %r10, %r10         # src[i] <= 0?
        jle Extra2              # if yes, goto Extra2:
        iaddq $1, %rax          # count++

Extra2:	iaddq $-1, %rdx		# len = len - 1
	jl Done			# if no extras, goto Done: 
	rmmovq %r11, 8(%rsi)	# move src[i+1] to dst[i+1]
	andq %r11, %r11		# src[i+1] <= 0?
	jle Extra3		# if yes, goto Extra3:
	iaddq $1, %rax		# count++

Extra3:	iaddq $-1, %rdx		# len = len - 1
	jl Done			# if no extras, goto Done:
	mrmovq 16(%rdi), %r10	# move src[i+2] to %r10
	rmmovq %r10, 16(%rsi)	# move src[i+2] to dst[i+1]
	andq %r10, %r10		# src[i+2] <= 0?
	jle Done		# if yes, goto Done:
	iaddq $1, %rax		# count++

##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
