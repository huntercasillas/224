                            | #######################################################################
                            | # Test for copying block of size 63;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f46806000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f23f00000000000000 | 	irmovq $63, %rdx		# src and dst have 63 elements
0x014: 30f6e803000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f7e001000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Hunter Casillas 
                            | # NetID: casillas
                            | #
                            | # Describe how and why you modified the baseline code:
                            | # 
                            | # See comments directly after each instruction for full explanation...
                            | # I implemented and used iaddq to decrease the amount of overall instructions.
                            | # I added a loop unroller function, which unrolls by a factor of 4.
                            | # I alternated registers to avoid data dependencies.
                            | # I added 3 functions to handle extras after the loop unroller.
                            | # I preemptively set certain registers a function early to avoid bubbles. 
                            | # This ncopy program assesses 4 indices at once and adds to the count if they are > 0.  
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
0x032: 6300                 | 	xorq %rax,%rax		# count = 0;
0x034: 6222                 | 	andq %rdx,%rdx		# len <= 0?
0x036: 71db01000000000000   | 	jle Done		# if yes, goto Done:
0x03f: c0f2fcffffffffffffff | 	iaddq $-4, %rdx		# len = len - 4
0x049: 721d01000000000000   | 	jl End			# check for extras, goto End:
                            | 
0x052: 50a70000000000000000 | Loop:	mrmovq (%rdi), %r10	# move src[i] to %r10
0x05c: 50970800000000000000 | 	mrmovq 8(%rdi), %r9	# move src[i+1] to %r9
0x066: 40a60000000000000000 |     	rmmovq %r10, (%rsi)	# move src[i] to dst[i]
0x070: 62aa                 |     	andq %r10, %r10		# src[i] <= 0?
0x072: 718500000000000000   |     	jle Npos1       	# if yes, goto Npos1:
0x07b: c0f00100000000000000 |     	iaddq $1, %rax      	# count++
                            | 
0x085: 40960800000000000000 | Npos1:	rmmovq %r9, 8(%rsi)	# move src[i+1] to dst[i+1]
0x08f: 6299                 | 	andq %r9, %r9		# src[i+1] <= 0?
0x091: 71a400000000000000   | 	jle Npos2		# if yes, goto Npos2:
0x09a: c0f00100000000000000 | 	iaddq $1, %rax		# count++
                            | 
0x0a4: 50a71000000000000000 | Npos2:	mrmovq 16(%rdi), %r10	# move src[i+2] to %r10
0x0ae: 50971800000000000000 | 	mrmovq 24(%rdi), %r9	# move src[i+3] to %r9
0x0b8: 40a61000000000000000 | 	rmmovq %r10, 16(%rsi)	# move src[i+2] to dst[i+2]
0x0c2: 62aa                 | 	andq %r10, %r10		# src[i+2] <= 0?
0x0c4: 71d700000000000000   | 	jle Npos3:		# if yes, goto Npos3:
0x0cd: c0f00100000000000000 | 	iaddq $1, %rax		# count++
                            | 
0x0d7: 40961800000000000000 | Npos3:	rmmovq %r9, 24(%rsi)	# move src[i+3] to dst[i+3]
0x0e1: 6299                 | 	andq %r9, %r9		# src[i+3] <= 0?
0x0e3: 71f600000000000000   | 	jle Unroll		# if yes, goto Unroll:
0x0ec: c0f00100000000000000 | 	iaddq $1, %rax		# count++
                            | 
0x0f6: c0f72000000000000000 | Unroll:	iaddq $32, %rdi		# begin unrolling at src[i+4]
0x100: c0f62000000000000000 | 	iaddq $32, %rsi		# begin unrolling at dst[i+4]
0x10a: c0f2fcffffffffffffff | 	iaddq $-4, %rdx		# len = len - 4
0x114: 755200000000000000   | 	jge Loop		# if extras remain, repeat Loop
                            | 
0x11d: c0f20400000000000000 | End:	iaddq $4, %rdx		# return len to correct value
                            | 
0x127: c0f2ffffffffffffffff | Extra1: iaddq $-1, %rdx         # len = len - 1
0x131: 72db01000000000000   |         jl Done                 # if no extras, goto Done:
0x13a: 50a70000000000000000 |         mrmovq (%rdi), %r10     # move src[i] to %r10
0x144: 50b70800000000000000 | 	mrmovq 8(%rdi), %r11    # move src[i+1] to %r11
0x14e: 40a60000000000000000 | 	rmmovq %r10, (%rsi)     # move src[i] to dst[i]
0x158: 62aa                 |         andq %r10, %r10         # src[i] <= 0?
0x15a: 716d01000000000000   |         jle Extra2              # if yes, goto Extra2:
0x163: c0f00100000000000000 |         iaddq $1, %rax          # count++
                            | 
0x16d: c0f2ffffffffffffffff | Extra2:	iaddq $-1, %rdx		# len = len - 1
0x177: 72db01000000000000   | 	jl Done			# if no extras, goto Done: 
0x180: 40b60800000000000000 | 	rmmovq %r11, 8(%rsi)	# move src[i+1] to dst[i+1]
0x18a: 62bb                 | 	andq %r11, %r11		# src[i+1] <= 0?
0x18c: 719f01000000000000   | 	jle Extra3		# if yes, goto Extra3:
0x195: c0f00100000000000000 | 	iaddq $1, %rax		# count++
                            | 
0x19f: c0f2ffffffffffffffff | Extra3:	iaddq $-1, %rdx		# len = len - 1
0x1a9: 72db01000000000000   | 	jl Done			# if no extras, goto Done:
0x1b2: 50a71000000000000000 | 	mrmovq 16(%rdi), %r10	# move src[i+2] to %r10
0x1bc: 40a61000000000000000 | 	rmmovq %r10, 16(%rsi)	# move src[i+2] to dst[i+1]
0x1c6: 62aa                 | 	andq %r10, %r10		# src[i+2] <= 0?
0x1c8: 71db01000000000000   | 	jle Done		# if yes, goto Done:
0x1d1: c0f00100000000000000 | 	iaddq $1, %rax		# count++
                            | 
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x1db:                      | Done:
0x1db: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x1dc:                      | End:
                            | #/* $end ncopy-ys */
0x1dc:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x1e0:                      | 	.align 8
0x1e0:                      | src:
0x1e0: ffffffffffffffff     | 	.quad -1
0x1e8: feffffffffffffff     | 	.quad -2
0x1f0: fdffffffffffffff     | 	.quad -3
0x1f8: 0400000000000000     | 	.quad 4
0x200: 0500000000000000     | 	.quad 5
0x208: faffffffffffffff     | 	.quad -6
0x210: f9ffffffffffffff     | 	.quad -7
0x218: f8ffffffffffffff     | 	.quad -8
0x220: 0900000000000000     | 	.quad 9
0x228: 0a00000000000000     | 	.quad 10
0x230: f5ffffffffffffff     | 	.quad -11
0x238: 0c00000000000000     | 	.quad 12
0x240: f3ffffffffffffff     | 	.quad -13
0x248: 0e00000000000000     | 	.quad 14
0x250: 0f00000000000000     | 	.quad 15
0x258: 1000000000000000     | 	.quad 16
0x260: efffffffffffffff     | 	.quad -17
0x268: 1200000000000000     | 	.quad 18
0x270: edffffffffffffff     | 	.quad -19
0x278: 1400000000000000     | 	.quad 20
0x280: ebffffffffffffff     | 	.quad -21
0x288: 1600000000000000     | 	.quad 22
0x290: e9ffffffffffffff     | 	.quad -23
0x298: e8ffffffffffffff     | 	.quad -24
0x2a0: e7ffffffffffffff     | 	.quad -25
0x2a8: e6ffffffffffffff     | 	.quad -26
0x2b0: 1b00000000000000     | 	.quad 27
0x2b8: e4ffffffffffffff     | 	.quad -28
0x2c0: 1d00000000000000     | 	.quad 29
0x2c8: 1e00000000000000     | 	.quad 30
0x2d0: 1f00000000000000     | 	.quad 31
0x2d8: 2000000000000000     | 	.quad 32
0x2e0: 2100000000000000     | 	.quad 33
0x2e8: deffffffffffffff     | 	.quad -34
0x2f0: ddffffffffffffff     | 	.quad -35
0x2f8: dcffffffffffffff     | 	.quad -36
0x300: dbffffffffffffff     | 	.quad -37
0x308: 2600000000000000     | 	.quad 38
0x310: 2700000000000000     | 	.quad 39
0x318: d8ffffffffffffff     | 	.quad -40
0x320: 2900000000000000     | 	.quad 41
0x328: d6ffffffffffffff     | 	.quad -42
0x330: 2b00000000000000     | 	.quad 43
0x338: 2c00000000000000     | 	.quad 44
0x340: 2d00000000000000     | 	.quad 45
0x348: d2ffffffffffffff     | 	.quad -46
0x350: 2f00000000000000     | 	.quad 47
0x358: 3000000000000000     | 	.quad 48
0x360: 3100000000000000     | 	.quad 49
0x368: 3200000000000000     | 	.quad 50
0x370: 3300000000000000     | 	.quad 51
0x378: 3400000000000000     | 	.quad 52
0x380: 3500000000000000     | 	.quad 53
0x388: caffffffffffffff     | 	.quad -54
0x390: c9ffffffffffffff     | 	.quad -55
0x398: c8ffffffffffffff     | 	.quad -56
0x3a0: c7ffffffffffffff     | 	.quad -57
0x3a8: 3a00000000000000     | 	.quad 58
0x3b0: c5ffffffffffffff     | 	.quad -59
0x3b8: c4ffffffffffffff     | 	.quad -60
0x3c0: c3ffffffffffffff     | 	.quad -61
0x3c8: c2ffffffffffffff     | 	.quad -62
0x3d0: c1ffffffffffffff     | 	.quad -63
0x3d8: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x3e0:                      | 	.align 16
0x3e0:                      | Predest:
0x3e0: fadebc0000000000     | 	.quad 0xbcdefa
0x3e8:                      | dest:
0x3e8: abefcd0000000000     | 	.quad 0xcdefab
0x3f0: abefcd0000000000     | 	.quad 0xcdefab
0x3f8: abefcd0000000000     | 	.quad 0xcdefab
0x400: abefcd0000000000     | 	.quad 0xcdefab
0x408: abefcd0000000000     | 	.quad 0xcdefab
0x410: abefcd0000000000     | 	.quad 0xcdefab
0x418: abefcd0000000000     | 	.quad 0xcdefab
0x420: abefcd0000000000     | 	.quad 0xcdefab
0x428: abefcd0000000000     | 	.quad 0xcdefab
0x430: abefcd0000000000     | 	.quad 0xcdefab
0x438: abefcd0000000000     | 	.quad 0xcdefab
0x440: abefcd0000000000     | 	.quad 0xcdefab
0x448: abefcd0000000000     | 	.quad 0xcdefab
0x450: abefcd0000000000     | 	.quad 0xcdefab
0x458: abefcd0000000000     | 	.quad 0xcdefab
0x460: abefcd0000000000     | 	.quad 0xcdefab
0x468: abefcd0000000000     | 	.quad 0xcdefab
0x470: abefcd0000000000     | 	.quad 0xcdefab
0x478: abefcd0000000000     | 	.quad 0xcdefab
0x480: abefcd0000000000     | 	.quad 0xcdefab
0x488: abefcd0000000000     | 	.quad 0xcdefab
0x490: abefcd0000000000     | 	.quad 0xcdefab
0x498: abefcd0000000000     | 	.quad 0xcdefab
0x4a0: abefcd0000000000     | 	.quad 0xcdefab
0x4a8: abefcd0000000000     | 	.quad 0xcdefab
0x4b0: abefcd0000000000     | 	.quad 0xcdefab
0x4b8: abefcd0000000000     | 	.quad 0xcdefab
0x4c0: abefcd0000000000     | 	.quad 0xcdefab
0x4c8: abefcd0000000000     | 	.quad 0xcdefab
0x4d0: abefcd0000000000     | 	.quad 0xcdefab
0x4d8: abefcd0000000000     | 	.quad 0xcdefab
0x4e0: abefcd0000000000     | 	.quad 0xcdefab
0x4e8: abefcd0000000000     | 	.quad 0xcdefab
0x4f0: abefcd0000000000     | 	.quad 0xcdefab
0x4f8: abefcd0000000000     | 	.quad 0xcdefab
0x500: abefcd0000000000     | 	.quad 0xcdefab
0x508: abefcd0000000000     | 	.quad 0xcdefab
0x510: abefcd0000000000     | 	.quad 0xcdefab
0x518: abefcd0000000000     | 	.quad 0xcdefab
0x520: abefcd0000000000     | 	.quad 0xcdefab
0x528: abefcd0000000000     | 	.quad 0xcdefab
0x530: abefcd0000000000     | 	.quad 0xcdefab
0x538: abefcd0000000000     | 	.quad 0xcdefab
0x540: abefcd0000000000     | 	.quad 0xcdefab
0x548: abefcd0000000000     | 	.quad 0xcdefab
0x550: abefcd0000000000     | 	.quad 0xcdefab
0x558: abefcd0000000000     | 	.quad 0xcdefab
0x560: abefcd0000000000     | 	.quad 0xcdefab
0x568: abefcd0000000000     | 	.quad 0xcdefab
0x570: abefcd0000000000     | 	.quad 0xcdefab
0x578: abefcd0000000000     | 	.quad 0xcdefab
0x580: abefcd0000000000     | 	.quad 0xcdefab
0x588: abefcd0000000000     | 	.quad 0xcdefab
0x590: abefcd0000000000     | 	.quad 0xcdefab
0x598: abefcd0000000000     | 	.quad 0xcdefab
0x5a0: abefcd0000000000     | 	.quad 0xcdefab
0x5a8: abefcd0000000000     | 	.quad 0xcdefab
0x5b0: abefcd0000000000     | 	.quad 0xcdefab
0x5b8: abefcd0000000000     | 	.quad 0xcdefab
0x5c0: abefcd0000000000     | 	.quad 0xcdefab
0x5c8: abefcd0000000000     | 	.quad 0xcdefab
0x5d0: abefcd0000000000     | 	.quad 0xcdefab
0x5d8: abefcd0000000000     | 	.quad 0xcdefab
0x5e0:                      | Postdest:
0x5e0: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x5e8:                      | .align 8
                            | # Run time stack
0x5e8: 0000000000000000     | 	.quad 0
0x5f0: 0000000000000000     | 	.quad 0
0x5f8: 0000000000000000     | 	.quad 0
0x600: 0000000000000000     | 	.quad 0
0x608: 0000000000000000     | 	.quad 0
0x610: 0000000000000000     | 	.quad 0
0x618: 0000000000000000     | 	.quad 0
0x620: 0000000000000000     | 	.quad 0
0x628: 0000000000000000     | 	.quad 0
0x630: 0000000000000000     | 	.quad 0
0x638: 0000000000000000     | 	.quad 0
0x640: 0000000000000000     | 	.quad 0
0x648: 0000000000000000     | 	.quad 0
0x650: 0000000000000000     | 	.quad 0
0x658: 0000000000000000     | 	.quad 0
0x660: 0000000000000000     | 	.quad 0
                            | 
0x668:                      | Stack:
